name: OrbitHost CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          
      - name: Run tests
        run: |
          pytest backend/tests/
          
      - name: Basic health check
        run: |
          cd backend
          python -c "import app.core.config; print('Config module loaded successfully')"
          python -c "import app.models.deployment; print('Deployment models loaded successfully')"
          python -c "import app.services.screenshot_service; print('Screenshot service loaded successfully')"

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Lint with flake8
        run: |
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Format check with black
        run: |
          black --check backend/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: orbithost:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm orbithost:latest python -c "print('Docker image built successfully')"

  # This is a placeholder for the actual deployment
  # In a real implementation, you would use Fly.io's GitHub Actions
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        
      - name: Deploy to Fly.io
        run: |
          echo "This is a placeholder for the actual deployment"
          echo "In a real implementation, you would run: flyctl deploy --remote-only"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          
      - name: Verify deployment
        run: |
          echo "This is a placeholder for deployment verification"
          echo "In a real implementation, you would check if the deployment is accessible"
          
  # Phase 1 of monitoring implementation: Basic metrics
  metrics:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Check Prometheus metrics
        run: |
          echo "This is a placeholder for checking Prometheus metrics"
          echo "In a real implementation, you would verify that metrics are being collected"
